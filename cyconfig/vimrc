
" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
" set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)
set foldmethod=indent "set default foldmethod"


colorscheme molokai
let g:molokai_original = 1
let g:rehash256 = 1
set t_Co=256
set ts=4
set shiftwidth=4

set expandtab
set autoindent
set notextmode
set ffs=unix
" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif
"set nu!
autocmd InsertLeave * se nocul  " 用浅色高亮当前行  
autocmd InsertEnter * se cul    " 用浅色高亮当前行  
set foldenable      " 允许折叠  
set nocp " 不与vi兼容
filetype plugin on " 允许插件
let g:pydiction_location = '~/.vim/dict/complete-dict'
let g:pydiction_menu_height = 10

""iab  #//        #!/bin/env python <CR># Filename:<Tab><C-R>=expand("%:t")<CR><Esc>o# Date:<Tab><Tab><C-R>=strftime("%Y-%m-%d")<CR>

au FileType php call AddPHPFuncList()
function AddPHPFuncList()
    set dictionary-=~/.vim/php_funclist.txt 
    set dictionary+=~/.vim/php_funclist.txt
    set complete-=k complete+=k
endfunction

let Tlist_Show_One_File = 1 " 一次只显示一个文件中的信息
let Tlist_Auto_Open = 1 "设置打开文件自动打开

nnoremap <silent><F4> :TlistToggle<CR>
"不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1          "
"如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         " 在右侧窗口中显示taglist窗口
let Tlist_File_Fold_Auto_Close=1       " 自动折叠当前非编辑文件的方法列表
let Tlist_Auto_Update = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Process_File_Always = 1
let Tlist_Display_Prototype = 0
let Tlist_Compact_Format = 1

let NERDTreeHighlightCursorline = 1
"let NERDTreeShowBookmarks = 1
let NERDTreeIgnore = ['\.pyc$']
let NERDTreeDirArrows=0 
let mapleader=","
"let NERDChristmasTree = 1

autocmd BufWritePost *.php :TlistUpdate
autocmd BufWritePost *.py :TlistUpdate

hi Normal ctermbg=NONE

let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 

set hlsearch "搜索高亮
":nohlsearch
set wildmenu           " see :h 'wildmenu'
set wildmode=list:full " see :h 'wildmode' for all the possible values


""""""""""""""""""""""""""""""
" lookupfile setting
" """"""""""""""""""""""""""""""
" 指定英文逗号作为<leader>键
let mapleader=","

let g:LookupFile_MinPatLength = 2               "最少输入2个字符才开始查找
let g:LookupFile_PreserveLastPattern = 0        "不保存上次查找的字符串
let g:LookupFile_PreservePatternHistory = 1     "保存查找历史
let g:LookupFile_AlwaysAcceptFirst = 1          "回车打开第一个匹配项目
let g:LookupFile_AllowNewFiles = 0              "不允许创建不存在的文件
"if filereadable("./filenametags")                "设置tag文件的名字
    let g:LookupFile_TagExpr = '"./filenametags"'
"endif
"映射LookupFile为,lk
nmap <silent> <leader>lk :LUTags<cr>
"映射LUBufs为,ll
"nmap <silent> <leader>ll :LUBufs<cr>
"映射LUWalk为,lw
nmap <silent> <leader>lw :LUWalk<cr>


 
" 在指定目录生成filenametags，并使lookupfile将这个文件作为查找源
function SetRootOfTheProject(path)
    " 进入指定目录
   exe 'cd '.a:path
   " 生成文件标签
    exe '!genfiletags'
    " 获取标签文件的路径
   let tagFilePath = genutils#CleanupFileName(a:path.'/filenametags')
   " 设置LookupFile插件的全局变量，使之以上面生成的标签文件作为查找源
    exe "let g:LookupFile_TagExpr='\"".tagFilePath."\"'"
endfunction
" 设置当前位置为工程的根目录
function SetHereTheRoot()
    call SetRootOfTheProject('.')
endfunction
nmap <leader>root :call SetHereTheRoot()<CR>
" 从用户的输入获取指定路径，并设置为工程的根目录
function SetSpecifiedPathTheRoot()
    call SetRootOfTheProject(input('请输入工程根目录的路径：'))
endfunction
nmap <leader>xroot :call SetSpecifiedPathTheRoot()<CR>
 
" 使用LookupFile打开文件
nmap <leader>o :LookupFile<CR>


map <F5> :! /usr/local/bin/php -l %<CR>


" snippest
let g:snips_author = 'cyleung'

let &termencoding=&encoding
set fileencodings=utf-8,gbk
let g:DirDiffExcludes = "system,CVS,*.class,*.exe,.svn,*.swp,/data/,/template/" 
